#include "rummikub.h"
#include <algorithm>

using std::vector;
using std::cout;
using std::for_each;

// debugging only
#define COUT if(true) cout

RummiKub::RummiKub()
{
}

void RummiKub::Add(const Tile& tile)
{
  handSize_++;
  handMatrix_[tile.color][tile.denomination]++;

  // sort by denomination
  if (hand_.empty() || tile.denomination < hand_.back().denomination)
  {
    hand_.push_back(tile);
  }
  else
  {
    for (unsigned i = 0; i < hand_.size(); i++)
    {
      if (tile.denomination > hand_[i].denomination)
      {
        hand_.insert(hand_.begin() + i, tile);
        break;
      }
    }
  }
  printHand();
}

// returns true if it is done checking - sets solved if it found an answer
bool RummiKub::validateSolution()
{
  if (solved)
    return true;

  // is this solution valid?
  if (hand_.size() == 0)
  {
    // check the size of every run
    for (unsigned run = 0; run < runs_.size(); run++)
    {
      if (!runs_[run].empty() && runs_[run].size() < 3)
      {
        COUT << "empty hand, no no valid solution found\n";
        return false;
      }
    }

    //check the size of every group
    for (unsigned group = 0; group < groups_.size(); group++)
    {
      if (!groups_[group].empty() && groups_[group].size() < 3)
      {
        COUT << "empty hand, no no valid solution found\n";
        return false;
      }
    }

    // runs and groups are valid
    solved = true;

    return true;
  }
  else
  {
    return false;
  }
}

void RummiKub::printHand()
{
  COUT << "current hand : \n";
  for (unsigned i = 0; i < hand_.size(); i++)
  {
    COUT << hand_[i] << " ";
  }
  COUT << "\n\n";
  printSolution();
  COUT << "\n\n";

}

void RummiKub::printSolution()
{
  COUT << "Current Solution: \n";
  COUT << "---- Runs ----\n";
  for (unsigned run = 0; run < runs_.size(); run++)
  {
    COUT << "< ";
    for (unsigned t = 0; t < runs_[run].size(); t++)
    {
      COUT << runs_[run][t] << " ";

    }
    COUT << ">\n";
  }


  COUT << "\n---- Groups ----\n";
  for (unsigned group = 0; group < groups_.size(); group++)
  {
    COUT << "< ";
    for (unsigned t = 0; t < groups_[group].size(); t++)
    {
      COUT << groups_[group][t] << " ";
    }
    COUT << " >  ";
  }
  COUT << "\n";
}

void RummiKub::popSingles()
{
  //clean up empties
  for (unsigned i = 0; i < runs_.size(); i++)
  {
    if (runs_[i].empty())
    {
      runs_.erase(runs_.begin() + i);
      i--;
    }
  }
}

void RummiKub::popGroup()
{
  COUT << "Popping groups \n";

  for (unsigned group = 0; group < groups_.size(); group++)
  {
    for (unsigned tile = 0; tile < groups_[group].size(); tile++)
    {
      Add(groups_[group][tile]);
    }
  }

  printHand();
  groups_.clear();
}

void RummiKub::undoRunAdd(unsigned run)
{
  COUT << "undoing run add\n";

  Add(runs_[run].back());
  runs_[run].pop_back();

  //pop empties
  if (runs_[run].empty())
    runs_.erase(runs_.begin() + run);

  printHand();
}

void RummiKub::undoGroupAdd(unsigned group)
{
  COUT << "undoing group add\n";

  Add(groups_[group].back());
  groups_[group].pop_back();

  //pop empties
  if (groups_[group].empty())
    groups_.erase(groups_.begin() + group);

  printHand();
}

void RummiKub::Solve()
{
  solved = solve_rec(hand_.size());
}

bool RummiKub::solve_rec(unsigned tileCount)
{

  COUT << "\n\n\n\n\n==========================================\n";
  printHand();

  //base case
  if (!tileCount)
    return validateSolution();

  unsigned sequenceSize[] = 
  { 
    runs_.size(), 
    groups_.size() 
  };

  // for every action
  for (unsigned action = 0; action < actionCount_; action++)
  {
    // do action if rec returns true pass it up
    for (unsigned sequenceIndex = 0; sequenceIndex <= sequenceSize[action]; sequenceIndex++)
    {
      unsigned index = tileCount - 1;

      COUT << "Performing action: " << debugNames_[action] << " on " << hand_[index] << " :[" << sequenceIndex <<  "]\n";

      if ((this->*(actions[action]))(index, sequenceIndex))
      {
        if (solve_rec(index))
          return true;

        // undo otherwise
        (this->*(undo[action]))(sequenceIndex);
      }
    }
  }

  return false;
}

vector<vector<Tile>> RummiKub::GetGroups() const
{
  return groups_;
}

vector<vector<Tile>> RummiKub::GetRuns() const
{
  return runs_;

}

/*
    3-4 tiles
    same denominations
    all different color
*/
bool RummiKub::addToGroup(unsigned index, unsigned group)
{
  if (index >= hand_.size())
    return false;

  Tile tile = hand_[index];

  // are you inserting at the end?
  if (groups_.empty() || groups_.size() == group)
  {
    newGroup(index);
    return true;
  }

  // can you insert it where you want?                         
  if (groups_.size() > group &&                                // valid group index
      !groups_[group].empty() &&                               // valid group
      groups_[group].size() < 4 &&                             // legal group
      tile.color != groups_[group].front().color &&            // legal tile color
      tile.denomination == groups_[group].front().denomination)// legal tile denomination
  {
    COUT << "adding " << tile << " to group\n";
    groups_[group].push_back(tile);
    return true;
  }

  COUT << tile << " cannot be added to any group\n";
  return false;
}

/*
    3+ tiles
    all same color
    denominations are consecutive
*/
bool RummiKub::addToRun(unsigned index, unsigned run)
{
  // try to add starting in slot s
  Tile& tile = hand_[index];

  // are you inserting at the end?
  if (runs_.empty() || runs_.size() == run)
  {
    newRun(index);
    return true;
  }

  // can it be inserted where you want?
  if (runs_.size() > run && runs_[run].front().color == tile.color)
  {
    // add to run if valid 
    if (runs_[run].back().denomination == tile.denomination - 1)
    {
      COUT << "adding " << tile << " to run \n";

      runs_[run].push_back(tile);
      hand_.erase(hand_.begin() + index);
      return true;
    }
  }

  COUT << tile << " cannot be added to any run\n";
  return false;
}


void RummiKub::newGroup(unsigned index )
{
  vector<Tile>group = {hand_.at(index)};
  groups_.push_back(group);

  // pop that tile
  hand_.erase(hand_.begin() + index);

  COUT << "creating group \n";
}

void RummiKub::newRun(unsigned index)
{
  COUT << "creating run with " << hand_.at(index) <<"\n";
  vector<Tile>run = {hand_.at(index)};
  runs_.push_back(run);

  // pop that tile
  hand_.erase(hand_.begin() + index);

}


